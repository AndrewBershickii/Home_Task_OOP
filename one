class Student:
    students_list = []

    def __init__(self, first_name, last_name, gender):
        self.first_name = first_name
        self.last_name = last_name
        self.gender = gender
        self.finished_courses = []
        self.courses_progress = []
        self.grade = {}
        self.students_list.append(self)

    def add_finish_courses(self, course):
        if course not in self.finished_courses:
            self.finished_courses.append(course)
        else:
            print('Error')

    def rate_hw(self, lecturer, course, grade):
        if (isinstance(lecturer, Lecturer) and course in self.courses_progress and course in lecturer.courses_attached
                or course in self.finished_courses):
            if course in lecturer.lecture_grade:
                lecturer.lecture_grade[course] += [grade]
            else:
                lecturer.lecture_grade[course] = [grade]
        else:
            print('Error')

    def avg_grade(self):
        avg_lec = {val: round((sum(items) / len(items)), 2) for val, items in self.grade.items()}
        res = []
        for key, val in avg_lec.items():
            res.append(f'Средняя оценка домашних заданий по курсу {key}: {val}')
        return '\n'.join(res)

    def general_avg(self):
        avg_gen = [i for val in self.grade.values() for i in val]
        return round(sum(avg_gen) / len(avg_gen), 2)

    def __str__(self):
        res = f'Имя: {self.first_name} \nФамилия: {self.last_name} \n{self.avg_grade()} \n' \
              f'Общая средняя оценка: {self.general_avg()} \n' \
              f'Курсы в процессе изучения: {",".join(self.courses_progress)} \n' \
              f'Завершенные курсы: {", ".join(self.finished_courses)}'
        return res

    def __lt__(self, other):
        if isinstance(other, Student):
            return self.general_avg() < other.general_avg()
        else:
            print(other, 'not Student!')
            return

class Mentor:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name
        self.courses_attached = []

class Lecturer(Mentor):  # Лекторы
    lecturer_list = []

    def __init__(self, first_name, last_name):
        super().__init__(first_name, last_name)
        self.lecture_grade = {}
        self.lecturer_list.append(self)

    def add_courses(self, course):
        if course not in self.courses_attached:
            self.courses_attached.append(course)
        else:
            print('The course has already been added')

    def average_grade(self):
        avg_lec = {val: round(sum(items) / len(items), 2) for val, items in self.lecture_grade.items()}
        res = []
        for key, val in avg_lec.items():
            res.append(f'Средняя оценка лекций по курсу {key}: {val}')
        return '\n'.join(res)

    def general_average(self):
        avg_gen = [i for val in self.lecture_grade.values() for i in val]
        return round(sum(avg_gen) / len(avg_gen), 2)

    def __str__(self):
        res = f'Имя: {self.first_name} \nФамилия: {self.last_name} \n{self.average_grade()} \n' \
              f'Общая средняя оценка лекций {self.general_average()}'
        return res

    def __lt__(self, other):
        if isinstance(other, Lecturer):
            return self.general_average() < other.general_average()
        else:
            print(other, 'not Lecturer!')
            return

class Reviewer(Mentor):  # Ревьюеры - эксперты, проверяющие задания
    def __str__(self):
        res = f'Имя: {self.first_name} \nФамилия: {self.last_name}'
        return res

    def add_courses(self, course):
        Lecturer.add_courses(self, course)

    def _rate_hw(self, students, course, grade):
        if isinstance(students, Student) and course in self.courses_attached and course in students.courses_progress:
            if course in students.grade:
                students.grade[course] += [grade]
            else:
                students.grade[course] = [grade]
        else:
            print('Error')

ivan = Student('Ivan', 'Ivanov', 'man')  # экземпляр класса Студент
ivan.finished_courses += ['sql', 'git']  # завершенные курсы
ivan.courses_progress += ['python']  # курс, изучаемый в настоящее время
ivan.grade['python'] = [9, 10, 9, 8, 8]
ivan.grade['sql'] = [8, 10, 7, 10, 10]

vasily = Student('Vasily', 'Vasiliev', 'man')
vasily.finished_courses += ['sql', 'git']
vasily.courses_progress += ['python']
vasily.grade['python'] = [10, 8, 10, 8, 8]
vasily.grade['sql'] = [10, 4, 10, 10, 7]

nikolay = Lecturer('Nikolay', 'Nikolaev')  # экземпляр класса Лектор
nikolay.courses_attached = ['python']  # курс, по которому лектор ведет лекцию
nikolay.add_courses('git')  # реализация метода класса Лектор добавления курса
nikolay.add_courses('sql')

nikita = Lecturer('Nikita', 'Sokolov')
nikita.courses_attached = ['python']
nikita.add_courses('git')
nikita.add_courses('sql')

ivan.rate_hw(nikolay, 'python', 10)  # реализовали метод класса Студент, позволяющий оценивать лекции
ivan.rate_hw(nikolay, 'python', 9)
ivan.rate_hw(nikolay, 'git', 10)
ivan.rate_hw(nikolay, 'sql', 2)

vasily.rate_hw(nikita, 'python', 7)
vasily.rate_hw(nikita, 'python', 5)
vasily.rate_hw(nikita, 'git', 10)
vasily.rate_hw(nikita, 'sql', 10)


some_reviewer = Reviewer('Alex', 'Popov')  # объявили экземпляр класса Эксперт
some_reviewer.courses_attached.append('python')  # в явном виде добавили курс, который Эксперт может оценивать
some_reviewer.add_courses('git')  # с помощью прямого наследования метода из класса Лектора добавляем курс
some_reviewer._rate_hw(ivan, 'python', 9)  # реализация метода класса Эксперт оценивание студента


print('Задание №3.1, п. 1'.center(40), end='\n\n')
print(some_reviewer)
print('Задание №3.1, п. 2'.center(40), end='\n\n')
print(nikolay)
print(nikita)
print('Задание №3.1, п. 3'.center(40), end='\n\n')
print(ivan)
print('Задание №3.2'.center(40), end='\n\n')
print(ivan < vasily)
print(nikolay > nikita)
print('Задание №4'.center(40), end='\n\n')

def avg_grade_courses_students(students, course):
    grade = []
    for i in students:
        for courses, grades in i.grade.items():
            if courses == course:
                grade.extend(grades)
    if len(grade) > 0:
        res = f'Средняя оценка студентов по курсу {course}: {round(sum(grade) / len(grade), 2)}'
        return res
    else:
        res = f'Курс {course} еще не оценивался преподавателем'
        return res

def avg_grade_courses_lecturers(lecturers, course):
    grade = []
    for lector in lecturers:
        for courses, grades in lector.lecture_grade.items():
            if courses == course:
                grade.extend(grades)
    if len(grade) > 0:
        res = f'Средняя оценка лекторов по курсу {course}: {round(sum(grade) / len(grade), 2)}'
        return res
    else:
        res = f'Курс {course} еще не оценивался студентами'
        return res

print(avg_grade_courses_students(Student.students_list, 'sql'))
print(avg_grade_courses_lecturers(Lecturer.lecturer_list, 'python'))
